#!/bin/bash
#SBATCH --job-name thermal
#SBATCH --time={{thermal_walltime}}:00:00
#SBATCH --nodes={{{thermal_nodes}}}
#SBATCH --tasks-per-node={{thermal_ppn}}
#SBATCH -o {{{thermal_log_file}}}

#FIXME: may be able to just request --ntasks and specify --tasks-per-node=28
# and if there are 0 tasks - well, its not going to run so should return an
# error

# Global Settings
WORKSPACE="${SLURM_SUBMIT_DIR}"
STAGEDDIR="${SLURM_SUBMIT_DIR}"
LOGDIR="{{{log_root}}}"
ERRORFILE="{{{thermal_error_file}}}"

# CTSP Settings
# none...

########################################################
# Don't edit below unless you know what you are doing
########################################################

echo "---Job started at:"
date
echo ""

# Clean up and copy back workspace
clean_up ()
{
  echo "Cleaning up temporary workspace (${WORKSPACE})..."
  time rsync -avu "${WORKSPACE}/" "${STAGEDDIR}"
  echo "Done cleaning up"
}

# Kill batch script and clean up
die ()
{
  echo "ERROR: $1" 1>&2
  echo "$1" > ${ERRORFILE}
  clean_up
  exit 1
}

# Check the exit status code of program
check_status ()
{
  if [[ $1 -ne 0 ]]; then
    die "Failed on '$2'"
  fi
}

# Initialize workspace
init ()
{
  echo "Creating temporary workspace (${WORKSPACE})..."
  time rsync -av "${STAGEDDIR}/" "${WORKSPACE}"
  echo "Done creating temporary workspace"
  cd "${WORKSPACE}"
}

# Set up CTSP environment (use default CTSP module)
module use /users/PZS0645/wiag/local-owens/emc2/share/modulefiles
module load ctsp

# Set up trap function
# Note: must be defined after `module load`
trap "die 'Unexpected termination'" TERM

# Create workspace in tmp directory
init

# Find number of cores from the subdirectories present
DIRS=$(find ${PWD} -maxdepth 1 -name 'CTSPsubd*' | sort)
NUM_CORES=$(echo "${DIRS}" | sed '/^$/d' | wc -l)
if [[ ${NUM_CORES} -eq 0 ]]; then
  DIRS="${PWD}"
  NUM_CORES=1
fi

# CTSP execution
echo "Processing CTSP using ${NUM_CORES} cores"

# Go into each subdirectory and run the CTSP executable
time srun /bin/bash -l -c "
  export PATH=\"${PATH}\"
  ARRAY=(${DIRS})
  WORKDIR=\"\${ARRAY[\${SLURM_PROCID}]}\"
  if [ -d \"\${WORKDIR}\" ]; then
    exec 1>\"${LOGDIR}/ctsp.\$SLURM_PROCID.log\" 2>&1
    cd \"\${WORKDIR}\"
    ctsp.x
  fi
"
check_status $? 'srun'

# Create common log file
LOGFILE="${LOGDIR}/ctsp.log"
> "${LOGFILE}"

# Merge CTSP subdirectories if more than one core
if [[ ${NUM_CORES} -ne 1 ]]; then
  echo "Merging the CTSP subdirectories"
  time merge.x >> "${LOGFILE}"
  echo "" >> "${LOGFILE}"
  check_status $? merge.x
fi

# Cutoff temperatures greater than melting temp
CUTOFF=$(awk -F',' 'NR==3{print $3; exit}' input.in)
echo "Cutoff spurious temperatures (CUTOFF = ${CUTOFF} C)"
echo "Using cutoff temperature = ${CUTOFF}" >> "${LOGFILE}"
time echo ${CUTOFF} | cutoff.x >> "${LOGFILE}"
echo "" >> "${LOGFILE}"
check_status $? cutoff.x

# Convert temperature file to binary
echo "Convert temperature file into binary format"
time temp_convert.x >> "${LOGFILE}"
echo "" >> "${LOGFILE}"
check_status $? temp_convert.x

# Create paraview inputs
echo "Generating Paraview input file"
time ctsp2case.x >> "${LOGFILE}"
check_status $? ctsp2case.x

# Always clean up after yourself
clean_up

echo ""
echo "---Job finished at:"
date

exit 0
