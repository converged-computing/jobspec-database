#!/usr/bin/env python3
#
#  Michael Kuiper <kuiper.mike@gmail.com>
#

"""
\033[34;1m
mdwf (md workflow) \033[0m
mdwf is a python program used to help setup, run and monitor multiple molecular 
dynamics jobs run on a cluster based on a customisable directory structure. 

\033[22mUsage: mdwf (options) [<dir>] 
       mdwf -h |--help 
\033[34;1m
Options: \033[0m
  -h --help         Show this screen. 
  -m --monitor      Monitor Job status on cluster. 
  -i --initialize   Initialize jobs directories.
  -p --populate     Populate or update job directories with job scripts. 
  -c --checkjob     Checks job input before running simulations.
  -b --benchmark    Setup benchmarking runs for job optimization. 
  -s --start        Start all jobs.
  -g --gather       Collect all OutputFiles.
  -e --extend       Extend or shorten the runs of simulations. 
  --stop_jobs       Stops all running jobs immediately. 
  --pause           Pause all jobs jobs, (allows run to finish). 
  --restart         Restart all production jobs. 
  --clear_stops     Clear pausejob and stop flags. 
  --recover         Recover and cleanup stopped jobs. 
  --erase_all_data  Erases all job data. Use with caution!
  --clone           Clone directory structure without data. 
"""

import sys
import os 
import argparse

from mdwf_lib import mdwf_functions as mdwf

# ansi color variables for formatting purposes: 
DEFAULT ='\033[0m'
RED     ='\033[31m'
GREEN   ='\033[32m'
YELLOW  ='\033[33m'
BLUE    ='\033[34m'


def main():
    parser = argparse.ArgumentParser(description=GREEN+'mdwf -molecular dynamics workflow:'+DEFAULT+' a tool for controlling multiple MD jobs on a cluster')

    parser.add_argument("-m","--monitor",    help="monitor running jobs", action="store_true")
    parser.add_argument("-i","--initialize", help="initialize directories", action="store_true")
    parser.add_argument("-p","--populate",   help="populate directories with scripts", action="store_true")
    parser.add_argument("-c","--checkjob",   help="check job inputs", action="store_true")
#   parser.add_argument("-b","--benchmark",  help="benchmark jobs", action="store_true")
    parser.add_argument("-s","--start",      help="start all jobs", action="store_true")
    parser.add_argument("-r","--restart",    help="restart all jobs", action="store_true")
    parser.add_argument("-g","--gather",     help="gather data files in /Analysis", action="store_true")
    parser.add_argument("-e","--extend",     help="extend runs", action="store_true")
    parser.add_argument("--recover",         help="recover corrupted data", action="store_true")
    parser.add_argument("--clearflags",      help="clear stop flags in all job directories", action="store_true")
    parser.add_argument("--stop",            help="stop all jobs", action="store_true")
    parser.add_argument("--pause",           help="pause all jobs", action="store_true")
    parser.add_argument("--erasedata",       help="erase all data, use with caution", action="store_true")
    parser.add_argument("--clone",           help="clone directories", action="store_true")


    args = parser.parse_args()

    if args.monitor: 
        print((YELLOW+"Monitoring job status:"+DEFAULT))
        mdwf.monitor_jobs()
    if args.initialize: 
        print((YELLOW+"Initializing job directories:"+DEFAULT))
        mdwf.initialize_job_directories()
    if args.populate: 
        print((YELLOW+"Populating job directories:"+DEFAULT))
        mdwf.populate_job_directories()
    if args.checkjob: 
        print((YELLOW+"Checking job input:"+DEFAULT))
        mdwf.check_job()
#   if args.benchmark: 
#       print((YELLOW+"Benchmarking job:"+DEFAULT))
#       mdwf.benchmark()
    if args.start: 
        print((YELLOW+"Starting all jobs:"+DEFAULT))
        mdwf.start_all_jobs()
    if args.restart: 
        print((YELLOW+"Restarting production jobs:"+DEFAULT))
        mdwf.restart_all_production_jobs()
    if args.gather: 
        print((YELLOW+"Gathering data files: List under /Analysis"+DEFAULT))
        mdwf.gather_jobs()
    if args.extend: 
        print((YELLOW+"Extending production runs:"+DEFAULT))
        try:
            a = int(eval(input((GREEN+"Enter number of runs extentions: "+DEFAULT))))
        except ValueError:
            print("Not an integer value...")
        mdwf.extend_jobs(a)
    if args.recover: 
        print((YELLOW+"Recovering crashed jobs:"+DEFAULT))
        mdwf.recover_all_jobs()
    if args.clearflags: 
        print((YELLOW+"Clearing pausejob flags:"+DEFAULT))
        mdwf.clear_jobs()
    if args.stop: 
        print((YELLOW+"Stopping all jobs:"+DEFAULT))
        mdwf.stop_jobs()
    if args.pause: 
        print((YELLOW+"Pausing all jobs:"+DEFAULT))
        mdwf.pause_jobs()
    if args.erasedata: 
        print((RED+"Erasing data:"+DEFAULT))
        mdwf.erase_all_data()
    if args.clone: 
        print((YELLOW+"Cloning job directory:"+DEFAULT))
        mdwf.clone()

if __name__ == '__main__':

    main()
