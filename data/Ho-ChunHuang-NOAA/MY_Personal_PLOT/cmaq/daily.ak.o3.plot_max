#!/bin/sh
##
## SCRIPT FOR SINGLE DAY PROCESSING AND MAP GENERATION
##
## YYYYMMDD is the start day of NAQFC PM   simulation
## Cycle_hr is the model run starting hour
##
module use /apps/test/lmodules/core/
module load GrADS/2.2.2
module load prod_util
module load prod_envir
module load grib_util
wgrib=/apps/ops/prod/libs/intel/19.1.3.304/grib_util/1.2.2/bin/wgrib
wgrib2=/apps/ops/prod/libs/intel/19.1.3.304/wgrib2/2.0.8/bin/wgrib2
export GAUDPT=/apps/test/grads/spack/opt/spack/cray-sles15-zen2/gcc-11.2.0/grads-2.2.2-wckmyzg7qh5smosf6och6ehqtqlxoy4f/data/udpt
export GADDIR=/apps/test/grads/spack/opt/spack/cray-sles15-zen2/gcc-11.2.0/grads-2.2.2-wckmyzg7qh5smosf6och6ehqtqlxoy4f/data

flag_test=yes
flag_test=no

flag_qsub=no
flag_qsub=yes

if [ "${flag_qsub}" == "yes" ]; then
   flag_scp=no
else
   flag_scp=yes
fi

# set -x 

TODAY=`date +%Y%m%d`

MSG="USAGE : $0 NCO_run (default:prod|para) Cycle_hr (default:all|06|12) YYYYMMDD_BEG YYYYMMDD_END"

exp=prod
sel_cyc=all
FIRSTDAY=${TODAY}
LASTDAY=${TODAY}

if [ $# -lt 2 ]; then
   echo $MSG
   exit
else
   exp=$1
   sel_cyc=$2
fi
if [ $# -lt 3 ]; then
   FIRSTDAY=${TODAY}
   LASTDAY=${TODAY}
elif [ $# -lt 4 ]; then
   FIRSTDAY=$3
   LASTDAY=$3
else
   FIRSTDAY=$3
   LASTDAY=$4
fi
case ${sel_cyc} in
   ''|*[!0-9]*) if [ "${sel_cyc}" == "all" ]; then
            declare -a cyc_opt=( 06 12 )
         else
            echo "input choice for cycle time is not defined $2, program stop"
            echo $MSG
            exit
         fi ;;
   *) cyc_in=`printf %2.2d $2`
      if [ "${cyc_in}" == "06" ] || [ "${cyc_in}" == "12" ]; then
         declare -a cyc_opt=( ${cyc_in} )
      else
         echo "input choice for cycle time is not defined $2, program stop"
         echo $MSG
         exit
      fi ;;
esac
echo ${cyc_opt[@]}

capexp=`echo ${exp} | tr '[:lower:]' '[:upper:]'`
if [ ${exp} == 'para1' ]; then flag_update=no; fi

## echo " ${exp} ${sel_cyc} ${FIRSTDAY} ${LASTDAY}"

remote_dir=/home/people/emc/www/htdocs/mmb/hchuang/web/fig
remote_host=emcrzdm.ncep.noaa.gov
remote_user=hchuang

grid148=148
grid227=227
grid198=198

flag_update=no
if [ "${LASTDAY}" == "${TODAY}" ]; then flag_update=yes; fi

gs_dir=`pwd`

declare -a reg=( dset conus east west  ne10  nw10  se10  swse  ak   hi   )
declare -a lon0=( -175 -133 -100 -130  -81   -125  -91   -125  -180 -161 )
declare -a lon1=(   55  -60  -60  -90  -66   -105  -74   -100  -115 -154 )
declare -a lat0=(    0   21   24   21   37     37   24     21    51   18 )
declare -a lat1=(   80   52   50   50   48     50   40     45    74   23 )
nreg=${#reg[@]}
let max_ireg=${nreg}-1
idset=0
iconus=1
ieast=2
iwest=3
ine10=4
inw10=5
ise10=6
iswse=7
iak=8
ihi=9

declare -a mchr=( JAN FEB MAR APR MAY JUN JUL AUG SEP OCT NOV DEC )

## declare -a typ=( max_1hr_o3 max_8hr_o3 ave_1hr_o3 ave_8hr_o3 )
#
declare -a typ=( o3 )
declare -a typ=( o3 max_1hr_o3 max_8hr_o3 )
declare -a typ=( max_1hr_o3 max_8hr_o3 )
ntyp=${#typ[@]}

capexp=`echo ${exp} | tr '[:lower:]' '[:upper:]'`
if [ ${exp} == 'para1' ]; then flag_update=no; fi

plotexp=${exp}
plotcapexp=${capexp}
mfileid="o3"
hfileid="awpozcon"
if [ $# -gt 4 ]; then
   flag_bc=$5
   if [ "${flag_bc}" == "bc" ]; then
      plotexp=${exp}"bc"
      plotcapexp=${capexp}"_BC"
      mfileid="o3_bc"
      hfileid="awpozcon_bc"
   fi
fi
NOW=${FIRSTDAY}
while [ ${NOW} -le ${LASTDAY} ]; do

   if [ ${exp} == 'prod' ]; then
      comdir=/lfs/h1/ops/${exp}/com/aqm/v6.1/ak.${NOW}
      comdir2=/lfs/h2/emc/physics/noscrub/${USER}/com/aqm/${exp}/ak.${NOW}
      comdir=/lfs/h1/ops/${exp}/com/aqm/v6.1/ak.${NOW}
      comdir2=/lfs/h2/emc/physics/noscrub/${USER}/com/aqm/${exp}/ak.${NOW}
      comdir2=/lfs/h2/emc/ptmp/${USER}/com/aqm/${exp}/ak.${NOW}
      if [ ! -d ${comdir} ]; then
         if [ -d ${comdir2} ]; then
            comdir=${comdir2}
         else
            echo "Can not find ${comdir} or ${comdir2}, program stop"
            exit
         fi
      fi
   elif [ ${exp} == 'ncopara' ]; then
      comdir=/lfs/h1/ops/para/com/aqm/v6.1/ak.${NOW}
      comdir2=/lfs/h1/ops/para/com/aqm/v6.1/ak.${NOW}
   elif [ ${exp} == 'para6a' ] || [ ${exp} == 'para6a' ] || [ ${exp} == 'para6x' ]; then
      comdir2=/lfs/h2/emc/ptmp/${USER}/com/aqm/${exp}/ak.${NOW}
      comdir=/lfs/h2/emc/physics/noscrub/${USER}/com/aqm/${exp}/ak.${NOW}
      if [ ! -d ${comdir} ]; then
         if [ -d ${comdir2} ]; then
            comdir=${comdir2}
         else
            echo "Can not find ${comdir} or ${comdir2}, program stop"
            exit
         fi
      fi
   else
      comdir=/lfs/h2/emc/physics/noscrub/${USER}/com/aqm/${exp}/ak.${NOW}
      comdir=/lfs/h2/emc/ptmp/${USER}/com/aqm/${exp}/ak.${NOW}
   fi
   if [ ! -d ${comdir} ]; then
      echo "////////////////////////////////////////"
      echo "${comdir} does not existed, program stop"
      echo "////////////////////////////////////////"
      exit
   else
      echo "////////////////////////////////////////////"
      echo "/// Fetching PM data Data from ${comdir} ///"
      echo "////////////////////////////////////////////"
   fi
   for cych in "${cyc_opt[@]}"; do
      cdate=${NOW}${cych}
      F1=$(${NDATE} +1 ${cdate}| cut -c9-10)
      TOMORROW=$(${NDATE} +24 ${cdate}| cut -c1-8)
      THIRDDAY=$(${NDATE} +48 ${cdate}| cut -c1-8)
      FOURTHDAY=$(${NDATE} +72 ${cdate}| cut -c1-8)
   
      Y1=`echo ${NOW} | cut -c1-4`
      MX=`echo ${NOW} | cut -c5-5`
      if [ ${MX} == '0' ]; then
         M1=`echo ${NOW} | cut -c6-6`
      else
         M1=`echo ${NOW} | cut -c5-6`
      fi
      D1=`echo ${NOW} | cut -c7-8`
      Y2=`echo ${TOMORROW} | cut -c1-4`
      MX=`echo ${TOMORROW} | cut -c5-5`
      if [ ${MX} == '0' ]; then
         M2=`echo ${TOMORROW} | cut -c6-6`
      else
         M2=`echo ${TOMORROW} | cut -c5-6`
      fi
      D2=`echo ${TOMORROW} | cut -c7-8`
      Y3=`echo ${THIRDDAY} | cut -c1-4`
      MX=`echo ${THIRDDAY} | cut -c5-5`
      if [ ${MX} == '0' ]; then
         M3=`echo ${THIRDDAY} | cut -c6-6`
      else
         M3=`echo ${THIRDDAY} | cut -c5-6`
      fi
      D3=`echo ${THIRDDAY} | cut -c7-8`
      Y4=`echo ${FOURTHDAY} | cut -c1-4`
      MX=`echo ${FOURTHDAY} | cut -c5-5`
      if [ ${MX} == '0' ]; then
         M4=`echo ${FOURTHDAY} | cut -c6-6`
      else
         M4=`echo ${FOURTHDAY} | cut -c5-6`
      fi
      D4=`echo ${FOURTHDAY} | cut -c7-8`
      range1=05Z${D1}${mchr[$M1-1]}${Y1}-04Z${D2}${mchr[$M2-1]}${Y2}
      range2=05Z${D2}${mchr[$M2-1]}${Y2}-04Z${D3}${mchr[$M3-1]}${Y3}
      range3=05Z${D3}${mchr[$M3-1]}${Y3}-04Z${D4}${mchr[$M4-1]}${Y4}

      tmpdir=/lfs/h2/emc/stmp/${USER}/com2_aqm_${exp}_${mfileid}_max.${NOW}${cych}
      if [ -d ${tmpdir} ]; then
         /bin/rm -f ${tmpdir}/*
      else
         mkdir -p ${tmpdir}
      fi
   
      fig_dir=/lfs/h2/emc/stmp/${USER}/daily_plot_${mfileid}_max/aqm_${plotexp}_o3
      outdir=${fig_dir}.${NOW}${cych}
      if [ ! -d ${outdir} ]; then mkdir -p ${outdir}; fi

      let numcyc=${cych}
      cychr="t${cych}z"
      echo " Perform operation on cych = ${cych}  cychr = ${cychr}"
      if [ "${flag_test}" == "yes" ]; then continue; fi

      for i in "${typ[@]}"
      do
        case ${i} in
           max_1hr_o3) cp ${comdir}/aqm.${cychr}.max_1hr_${mfileid}.${grid198}.grib2  ${tmpdir};;
           max_8hr_o3) cp ${comdir}/aqm.${cychr}.max_8hr_${mfileid}.${grid198}.grib2  ${tmpdir};;
         esac
      done
      cd ${tmpdir}
   
      n0=0
      let n1=${ntyp}-1
      let ptyp=n0
      while [ ${ptyp} -le ${n1} ]; do

         if [ "${typ[${ptyp}]}" == "max_1hr_o3" ] || [ "${typ[${ptyp}]}" == "max_8hr_o3" ]; then
            if [ "${typ[${ptyp}]}" == "max_1hr_o3" ]; then
               if [ -e aqm.ctl ]; then /bin/rm -f aqm.ctl; fi
               if [ "${cych}" == "06" ]; then
                  cat >  aqm.ctl <<EOF
dset ${tmpdir}/aqm.${cychr}.max_1hr_${mfileid}.${grid198}.grib2
index ${tmpdir}/aqm.${cychr}.max_1hr_${mfileid}.${grid198}.grib2.idx
undef 9.999E+20
title ${tmpdir}/aqm.${cychr}.max_1hr_${mfileid}.${grid198}.grib2
* produced by alt_g2ctl v1.0.5, use alt_gmp to make idx file
* command line options: -0t -short aqm.t06z.max_1hr_${mfileid}.148.grib2
* alt_gmp options: update=0
* alt_gmp options: nthreads=1
* alt_gmp options: big=0
* wgrib2 inventory flags: -npts -set_ext_name 1 -T -ext_name -ftime -lev
* wgrib2 inv suffix: .invd02
* griddef=1:0:(825 x 553):grid_template=20:winds(grid): polar stereographic grid: (825 x 553) input WE:SN output WE:SN res 8 North pole lat1 40.530000 lon1 181.429000 latD 60.000000 lonV 210.000000 dx 5953.000000 m dy 5953.000000 m:winds(grid)

dtype grib2
pdef 825 553 nps 441.010758607173 809.009634930092 210.000000 5.953
xdef 1200 linear -180.0 0.0535794016966811
ydef 480 linear 51.0 0.0535960769230769
tdef 1 linear ${cych}Z${D1}${mchr[$M1-1]}${Y1} 1mo
zdef 1 levels 1
vars 3
v1 0 0 "OZMAX1:-2147483647--2147483624 hour ave fcst:1 sigma level"
v2 0 0 "OZMAX1:23-46 hour ave fcst:1 sigma level"
v3 0 0 "OZMAX1:47-70 hour ave fcst:1 sigma level"
endvars
EOF
               elif [ "${cych}" == "12" ]; then
                  cat >  aqm.ctl <<EOF
dset ${tmpdir}/aqm.${cychr}.max_1hr_${mfileid}.${grid198}.grib2
index ${tmpdir}/aqm.${cychr}.max_1hr_${mfileid}.${grid198}.grib2.idx
undef 9.999E+20
title ${tmpdir}/aqm.${cychr}.max_1hr_${mfileid}.${grid198}.grib2
* produced by alt_g2ctl v1.0.5, use alt_gmp to make idx file
* command line options: -0t -short aqm.t06z.max_1hr_${mfileid}.148.grib2
* alt_gmp options: update=0
* alt_gmp options: nthreads=1
* alt_gmp options: big=0
* wgrib2 inventory flags: -npts -set_ext_name 1 -T -ext_name -ftime -lev
* wgrib2 inv suffix: .invd02
* griddef=1:0:(825 x 553):grid_template=20:winds(grid): polar stereographic grid: (825 x 553) input WE:SN output WE:SN res 8 North pole lat1 40.530000 lon1 181.429000 latD 60.000000 lonV 210.000000 dx 5953.000000 m dy 5953.000000 m:winds(grid)
dtype grib2
pdef 825 553 nps 441.010758607173 809.009634930092 210.000000 5.953
xdef 1200 linear -180.0 0.0535794016966811
ydef 480 linear 51.0 0.0535960769230769
tdef 1 linear ${cych}Z${D1}${mchr[$M1-1]}${Y1} 1mo
zdef 1 levels 1
vars 3
v1 0 0 "OZMAX1:-2147483641--2147483618 hour ave fcst:1 sigma level"
v2 0 0 "OZMAX1:17-40 hour ave fcst:1 sigma level"
v3 0 0 "OZMAX1:41-64 hour ave fcst:1 sigma level"
endvars
EOF
               else
                  echo "Cycle Hour ${cych}z max 1hr ozone ctl files is not defined, program stop, EXIT"
                  exit
               fi
            elif [ "${typ[${ptyp}]}" == "max_8hr_o3" ]; then
               if [ -e aqm.ctl ]; then /bin/rm -f aqm.ctl; fi
               if [ "${cych}" == "06" ]; then
                  cat >  aqm.ctl <<EOF
dset ${tmpdir}/aqm.${cychr}.max_8hr_${mfileid}.${grid198}.grib2
index ${tmpdir}/aqm.${cychr}.max_8hr_${mfileid}.${grid198}.grib2.idx
undef 9.999E+20
title ${tmpdir}/aqm.${cychr}.max_8hr_${mfileid}.${grid198}.grib2
* produced by alt_g2ctl v1.0.5, use alt_gmp to make idx file
* command line options: -0t -short aqm.t06z.max_8hr_${mfileid}.148.grib2
* alt_gmp options: update=0
* alt_gmp options: nthreads=1
* alt_gmp options: big=0
* wgrib2 inventory flags: -npts -set_ext_name 1 -T -ext_name -ftime -lev
* wgrib2 inv suffix: .invd02
* griddef=1:0:(825 x 553):grid_template=20:winds(grid): polar stereographic grid: (825 x 553) input WE:SN output WE:SN res 8 North pole lat1 40.530000 lon1 181.429000 latD 60.000000 lonV 210.000000 dx 5953.000000 m dy 5953.000000 m:winds(grid)
dtype grib2
pdef 825 553 nps 441.010758607173 809.009634930092 210.000000 5.953
xdef 1200 linear -180.0 0.0535794016966811
ydef 480 linear 51.0 0.0535960769230769
tdef 1 linear ${cych}Z${D1}${mchr[$M1-1]}${Y1} 1mo
zdef 1 levels 1
vars 3
v1 0 0 "OZMAX8:5-28 hour ave fcst:1 sigma level"
v2 0 0 "OZMAX8:29-52 hour ave fcst:1 sigma level"
v3 0 0 "OZMAX8:53-72 hour ave fcst:1 sigma level"
endvars
EOF
               elif [ "${cych}" == "12" ]; then
                  cat >  aqm.ctl <<EOF
dset ${tmpdir}/aqm.${cychr}.max_8hr_${mfileid}.${grid198}.grib2
index ${tmpdir}/aqm.${cychr}.max_8hr_${mfileid}.${grid198}.grib2.idx
undef 9.999E+20
title ${tmpdir}/aqm.${cychr}.max_8hr_${mfileid}.${grid198}.grib2
* produced by alt_g2ctl v1.0.5, use alt_gmp to make idx file
* command line options: -0t -short aqm.t06z.max_8hr_${mfileid}.148.grib2
* alt_gmp options: update=0
* alt_gmp options: nthreads=1
* alt_gmp options: big=0
* wgrib2 inventory flags: -npts -set_ext_name 1 -T -ext_name -ftime -lev
* wgrib2 inv suffix: .invd02
* griddef=1:0:(825 x 553):grid_template=20:winds(grid): polar stereographic grid: (825 x 553) input WE:SN output WE:SN res 8 North pole lat1 40.530000 lon1 181.429000 latD 60.000000 lonV 210.000000 dx 5953.000000 m dy 5953.000000 m:winds(grid)
dtype grib2
pdef 825 553 nps 441.010758607173 809.009634930092 210.000000 5.953
xdef 1200 linear -180.0 0.0535794016966811
ydef 480 linear 51.0 0.0535960769230769
tdef 1 linear ${cych}Z${D1}${mchr[$M1-1]}${Y1} 1mo
zdef 1 levels 1
vars 3
v1 0 0 "OZMAX8:-2147483647--2147483624 hour ave fcst:1 sigma level"
v2 0 0 "OZMAX8:23-46 hour ave fcst:1 sigma level"
v3 0 0 "OZMAX8:47-70 hour ave fcst:1 sigma level"
endvars
EOF
               else
                  echo "Cycle Hour ${cych}z max 8hr ozone ctl files is not defined, program stop, EXIT"
                  exit
               fi
            fi
            alt_gmp aqm.ctl
            if [ -e aqm.plots ]; then /bin/rm -f aqm.plots; fi

            cat >  aqm.plots <<EOF
'reinit'
'set gxout shaded'
'set gxout grfill'
'set display color white'
'set mpdset hires'
'set grads off'
'set rgb 99 220 220 255'
'set rgb 98 165 165 255'
'set rgb 97 110 110 255'
'set rgb 96   0 191 255'
'set rgb 95   0 255 255'
'set rgb 94   0 180   0'
'set rgb 93   0 231   0'
'set rgb 92  77 231  77'
'set rgb 91 255 255 127'
'set rgb 90 255 223   0'
'set rgb 89 255 165   0'
'set rgb 88 240 130  40'
'set rgb 87 255   0   0'
'set rgb 86 179   0   0'
'set rgb 85 128   0 128'
'c'
'open aqm.ctl'
'set lat ${lat0[${iak}]} ${lat1[${iak}]}'
'set lon ${lon0[${iak}]} ${lon1[${iak}]}'
'${gs_dir}/draw.aqm.o3.3d.max.gs ${gs_dir} ${outdir} ${plotexp} ${plotcapexp} ${NOW} ${cychr} ${typ[${ptyp}]} ${range1} ${range2} ${range3} ak'
'quit'
EOF
            grads -blc "run aqm.plots"
         fi    ## end plot daily max 1hr or 8hr
         ((ptyp++))
      done   ## end ptyp
      if [ ${flag_scp} == 'yes' ]; then  # for RZDM maintainence
         ##
         ## TRANSFER PLOTS TO RZDM
         ##
         scp ${outdir}/aqm*.png ${remote_user}@${remote_host}:${remote_dir}/${Y1}/${NOW}/${cychr}
      fi
   done   ## end for loop cych in "${cyc_opt[@]}"
   cdate=${NOW}"00"
   NOW=$(${NDATE} +24 ${cdate}| cut -c1-8)
done

if [ "${flag_qsub}" == "yes" ]; then
   working_dir=/lfs/h2/emc/stmp/${USER}/job_submit
   mkdir -p ${working_dir}
   cd ${working_dir}

   task_cpu='05:00:00'
   job_name=cmaq_${mfileid}max_${exp}${sel_cyc}
   batch_script=trans_cmaq${mfileid}max_${exp}.${FIRSTDAY}.${LASTDAY}.sh
   if [ -e ${batch_script} ]; then /bin/rm -f ${batch_script}; fi

   logdir=/lfs/h2/emc/ptmp/${USER}/batch_logs
   if [ ! -d ${logdir} ]; then mkdir -p ${logdir}; fi

   logfile=${logdir}/${job_name}_${FIRSTDAY}_${LASTDAY}.out
   if [ -e ${logfile} ]; then /bin/rm -f ${logfile}; fi

   file_hd=aqm
   file_type=png
   cat > ${batch_script} << EOF
#!/bin/sh
#PBS -o ${logfile}
#PBS -e ${logfile}
#PBS -l place=shared,select=1:ncpus=1:mem=4GB
#PBS -N j${job_name}
#PBS -q "dev_transfer"
#PBS -A AQM-DEV
#PBS -l walltime=${task_cpu}
# 
# 
#### 
##
##  Provide fix date daily Hysplit data processing
##
   module load prod_util

   FIRSTDAY=${FIRSTDAY}
   LASTDAY=${LASTDAY}
   exp=${exp}
   remote_user=${remote_user}
   remote_host=${remote_host}
   remote_dir=${remote_dir}
   file_hd=${file_hd}
   file_type=${file_type}
   flag_update=${flag_update}
   fig_dir=${fig_dir}
   declare -a cyc=( ${cyc_opt[@]} )
EOF
   ##
   ##  Creat part 2 script : exact wording of scripts
   ##
   cat > ${batch_script}.add  << 'EOF'

   NOW=${FIRSTDAY}
   while [ ${NOW} -le ${LASTDAY} ]; do
      YY=`echo ${NOW} | cut -c1-4`
      YM=`echo ${NOW} | cut -c1-6`

      for i in "${cyc[@]}"; do
         cycle=t${i}z
         data_dir=${fig_dir}.${NOW}${i}
         if [ -d ${data_dir} ]; then
            scp ${data_dir}/${file_hd}*${file_type} ${remote_user}@${remote_host}:${remote_dir}/${YY}/${NOW}/${cycle}
         else
            echo "Can not find ${data_dir}, skip to next cycle/day"
         fi
      done  ## cycle time
      cdate=${NOW}"00"
      NOW=$(${NDATE} +24 ${cdate}| cut -c1-8)
   done
   if [ "${flag_update}" == "yes" ]; then
      script_dir=/lfs/h2/emc/physics/noscrub/${USER}/WEB/base
      cd ${script_dir}

      script_name=wcoss.run.cmaq_o3.sh
      bash ${script_name} ${LASTDAY}

      script_name=wcoss.run.cmaq2_o3.sh
      bash ${script_name} ${LASTDAY}
   fi
exit
EOF
   ##
   ##  Combine both working script together
   ##
   cat ${batch_script}.add >> ${batch_script}
   ##
   ##  Submit run scripts
   ##
   if [ "${flag_test}" == "no" ]; then
      qsub < ${batch_script}
      echo "${working_dir}/${batch_script}"
      echo "${logfile}"
   else
      echo "test qsub < ${batch_script} completed"
   fi
   echo "FIG DIR = ${outdir}"
fi
exit
