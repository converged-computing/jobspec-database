# vim: set filetype=sh:

#!/bin/bash
#PBS -l nodes=16:ppn=1,pvmem=1000mb,walltime=48:00:00
#PBS -j oe
#PBS -V

##########
#  Help  #
##########

#How to use this script:

# 1 - Copy this script and the inputs folder into your job dir.
#     (Script won't work if it's not in dir you submit from!!!)
# 2 - In this script, set DEBUG and the settings under Settings or Debug
#     settings. Make sure steps_per_run allows for 10s of runs per job.
# 3 - In 0.in and 1.in, set variables t and p and w, same in both scripts.
#     Set M val in 'read_data lmp/n16n-M-$p.lmp'. Set no. of run steps in 0.in.
# 4 - Run qsub resumable.pbs
#     If resuming, run as qsub -F "\"JOB RUN SUMMARY_FILE\"" resumable.pbs

cd $PBS_O_WORKDIR
readonly DEBUG=false

##############
#  Settings  #
##############

if ! $DEBUG; then
    readonly program="mpirun lmp_minerva"

    readonly MAX_RUNS=100
    readonly MAX_JOBS=5
    readonly enable_job_restart=true
    readonly cores_per_prog_instance=1
    readonly steps_per_run=30000000
    readonly buffer=600
    readonly pause=0

    readonly N_data=10000
    readonly N_swap=500

####################
#  Debug settings  #
####################

else
    readonly program="mpirun lmp_minerva"

    readonly MAX_RUNS=100
    readonly MAX_JOBS=2
    readonly enable_job_restart=true
    readonly cores_per_prog_instance=1
    readonly steps_per_run=30000
    readonly buffer=60
    readonly pause=0

    readonly N_data=10000
    readonly N_swap=500
fi

###########
#  Setup  #
###########

#Readonly vars first
readonly args=($@)
readonly PBS_JOBNUM=`echo $PBS_JOBID | sed 's/\..*//'`
readonly end_time=$((`date +%s`+$PBS_WALLTIME))
if [[ ${args[0]} = '' ]]; then readonly JOB=0; else readonly JOB=${args[0]}; fi
if [[ ${args[2]} = '' ]]; then readonly SUMMARY_FILE="summary.${PBS_JOBNUM}"
else readonly SUMMARY_FILE=${args[2]}; fi
readonly n_lmps=$(( ${PBS_NP}/${cores_per_prog_instance} ))

#Command-line options for LAMMPS
readonly partition="${n_lmps}x${cores_per_prog_instance}"
readonly log_file="logs/tmp/log.lammps"
readonly screen_file="logs/tmp/screen"

#Vars that will change
if [[ ${args[1]} = '' ]]; then RUN=0; else RUN=${args[1]}; fi
allowance=$buffer
exit_reason='Unknown'
this_script="${PBS_O_WORKDIR}/${PBS_JOBNAME}"

echo "Start time of job $JOB: `date`"

####################
#  Various checks  #
####################

if [[ $RUN -lt $JOB ]]; then
    echo "WARNING: RUNS(=$RUN) < JOBS(=$JOB). This makes no sense."
fi
if $DEBUG; then
    echo "WARNING: Debug is turned on."
fi
if [[ $JOB -eq 0 ]]; then
    files=($(shopt -s nullglob; echo logs/*))
    if [[ ${#files[*]} -gt 0 ]]; then
        echo "WARNING: log dir not empty. Files may be mangled or appended to."
    fi
    files=($(shopt -s nullglob; echo traj/*))
    if [[ ${#files[*]} -gt 0 ]]; then
        echo "WARNING: traj dir not empty. Files may be mangled or appended to."
    fi
fi

#########################
#  Summary file header  #
#########################

#If file is new
if ! [[ -f $SUMMARY_FILE ]]; then
    printf "MAX_RUNS: %d\n" $MAX_RUNS >$SUMMARY_FILE
    printf "MAX_JOBS: %d\n" $MAX_JOBS >>$SUMMARY_FILE
    printf "JOB RESTARTING: %s\n" $enable_job_restart >>$SUMMARY_FILE
fi

#Start of every job
printf "\nJOB (JOB ID): %d (%d)\n" $JOB $PBS_JOBNUM >>$SUMMARY_FILE
printf "JOB START TIMEDATE: %s\n\n" "`date`" >>$SUMMARY_FILE
echo   " RUN | START STEP | START TIME | ELAPSED " >>$SUMMARY_FILE

###############
#  Functions  #
###############

remaining_time(){ now_date_s=`date +%s`; echo $(($end_time-$now_date_s)); }
secs_to_hoursminssecs(){
    ((h=$1/3600))
    ((m=($1%3600)/60))
    ((s=$1%60))
    printf "%02d:%02d:%02d\n" $h $m $s
}
get_allowance() {
    ar=($@); max=0
    for i in ${ar[@]}; do [ $i -gt $max ] && max=$i; done
    echo "$(($max+$buffer))"
}
run_program() {
    echo ""
    run_start_date_T=`date +%T`
    echo "Start time of run $RUN: `date`"

    #########
    #  Pre  #
    #########

    #Make new subdir
    mkdir -p logs/tmp traj/tmp "restart/$RUN"

    #Set up command-line options
    input_script="inputs/${RUN}.in"

    prev_runs=$(($RUN-1))
    timestep=`get_timestep`
    make_input

    ##################
    #  Main command  #
    ##################

    ARGS="-in $input_script -p $partition -log $log_file -screen $screen_file -var STEPS $steps_per_run -var RUN $RUN -var N_data $N_data -var N_swap $N_swap"
    echo "Command: $program $ARGS"
    $program $ARGS

    #Kill if there's an error in running the program
    if (( $? )); then
        echo "Exiting job and not restarting because $program exited with error."
        exit
    fi

    sleep ${pause}s

    ##########
    #  Post  #
    ##########

    join_dcd
    join_logs

    echo "End time of run $RUN: `date`"
    echo ""
}
get_timestep(){
    #Each run starts at local timestep 0. This func tracks the global timestep.
    if [[ $RUN -le 1 ]]; then
        ts=0
    else
        worldvar=(`tail -1 logs/log.lammps`)
        ts=${worldvar[0]}
    fi

    echo $ts
}
make_input() {
    #Make an input file for next time.
    if [[ $RUN -le 1 ]]; then
        echo "No need to make an input script for run $RUN"
        return
    fi

    #Get and set correct world variable as string
    worldvar=(`tail -1 logs/log.lammps`)
    swaps=${worldvar[*]:1}
    sed "s/\(variable w world \).*/\1$swaps/" inputs/1.in >inputs/${RUN}.in

}
run_summary() {
    printf >>$SUMMARY_FILE "%4d |%11.3e |%11s | %8s\n" \
        $RUN $timestep ${run_start_date_T} `secs_to_hoursminssecs ${lap_times[$RUN]}`
}
join_dcd() {
    if [[ $RUN -eq 1 ]]; then
        #Just mv from tmp dir to traj dir.
        for i in `seq 0 $((${n_lmps}-1))`; do
            mv traj/tmp/${i}.dcd traj/${i}.dcd&
        done
    elif [[ $RUN -ge 2 ]]; then
        #Join up. Delete first frame of the run because its same as last frame of last run.
        rename .dcd -old.dcd traj/[0-9]*.dcd
        for i in `seq 0 $((${n_lmps}-1))`; do
            ( catdcd -o traj/tmp/${i}.chop.dcd -first 2 traj/tmp/${i}.dcd >/dev/null; \
                catdcd -o traj/${i}.dcd traj/${i}-old.dcd traj/tmp/${i}.chop.dcd >/dev/null) &
        done
    fi

    wait
    rm -rf traj/*-old.dcd traj/tmp
}
join_logs (){
    #log.lammps and screen files are joined together relatively intact.
    #{log.lammps,screen}.$i files are only kept if $RUN is 0 or 1, 
    #otherwise a continuous file of thermo_output is kept.
    if [[ $RUN -eq 0 ]]; then
        #Just cp and call equil logs.
        mkdir -p logs/equil
        cp logs/tmp/log.lammps logs/equil/log.lammps
        cp logs/tmp/screen logs/equil/screen
        for i in `seq 0 $((${n_lmps}-1))`; do
            cp logs/tmp/log.lammps.$i logs/equil/log.lammps.$i
            cp logs/tmp/screen.$i logs/equil/screen.$i
        done

    elif [[ $RUN -eq 1 ]]; then
        #cp to logs/1
        mkdir -p logs/1
        cp logs/tmp/log.lammps logs/1/log.lammps
        cp logs/tmp/screen logs/1/screen

        #copy the first line. rest of file is copied in next if clause.
        awk 'NR==4 {print}' logs/tmp/log.lammps >logs/log.lammps
        awk 'NR==5 {print}' logs/tmp/screen >logs/screen

        for i in `seq 0 $((${n_lmps}-1))`; do
            cp logs/tmp/log.lammps.$i logs/1/log.lammps.$i
            cp logs/tmp/screen.$i logs/1/screen.$i
        done
    fi

    if [[ $RUN -ge 1 ]]; then
        #Append thermo output to master log.lammps files, correcting timestep.
        awk '{if (NR>4) {print ((NR-4)*'$N_swap')+'$timestep' substr($0, index($0, " "$2) )}}'\
            logs/tmp/log.lammps >>logs/log.lammps
        #Append output to screen files, leaving timestep as it is.
        tail --lines=+6 logs/tmp/screen >>logs/screen

        for i in `seq 0 $((${n_lmps}-1))`; do
            #Append thermo output to master log.lammps.$i files, correcting timestep.
            (
            awk '
                /Loop/{thermo=0}
                      {if(thermo==1) print ('$N_data'*(NR-line1))+'$timestep' substr($0, index($0, " "$2))}
                /Step/{thermo=1; line1=NR+1}
                ' logs/tmp/log.lammps.$i | tail --lines=+2 >>logs/log.lammps.$i
            ) &
        done
    fi

    wait
    rm -rf logs/tmp
}


##########
#  Runs  #
##########

for (( ; ; RUN++ )); do

    #Break if RUN reaches MAX_RUNS
    if [[ $RUN -ge $MAX_RUNS ]]; then
        exit_reason="Max runs reached. RUN=$RUN, MAX=$MAX_RUNS"
        break
    fi

    #Resubmit and break if time up
    if ! [[ "$allowance" -le `remaining_time` ]]; then

        if $enable_job_restart; then

            if [[ $(($JOB+1)) -lt "$MAX_JOBS" ]]; then

                echo "Submitting new job with set -x."
                set -x
                newjob=$(qsub -q $PBS_O_QUEUE -F "\"$(($JOB+1)) $RUN $SUMMARY_FILE\"" $this_script)
                set +x

            else
                exit_reason="Max jobs reached. JOB=$JOB, MAX=$MAX_JOBS"
            fi

        else
            exit_reason='Job restarting is disabled in $enable_job_restart'
        fi
        break

    fi

    #Otherwise proceeed
    start_date_s=`date +%s`

    run_program

    lap_times[$RUN]=$((`date +%s`-$start_date_s))
    run_summary

    allowance=`get_allowance ${lap_times[*]}`

done

if [[ $newjob = '' ]]; then
    echo "No new job. Exit reason: "$exit_reason

    echo ""                                      >>$SUMMARY_FILE
    echo "No new job. Exit reason: "$exit_reason >>$SUMMARY_FILE
    echo "End time: `date`"                      >>$SUMMARY_FILE
fi

echo "End time of job: `date`"
