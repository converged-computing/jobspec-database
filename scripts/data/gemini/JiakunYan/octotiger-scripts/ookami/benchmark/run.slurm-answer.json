{
    "application": "Octotiger",
    "details": {
        "software": {
            "octotiger": "Astrophysical simulation library based on the HPX runtime system",
            "openmpi": "MPI implementation for parallel computing",
            "gcc12.2.0": "C and C++ compiler used to build Octotiger and OpenMPI"
        },
        "resource_requirements": {
            "time": "00:15:00",
            "cores_per_node": 1,
            "slurm_options": {
                "--time": "Sets the maximum runtime of the job",
                "--ntasks-per-node": "Specifies the number of tasks (processes) to run per node"
            },
            "environment_variables": {
                "LCI_SERVER_MAX_SENDS": "Maximum number of outgoing packets allowed by the LCI server",
                "LCI_SERVER_MAX_RECVS": "Maximum number of incoming packets allowed by the LCI server",
                "LCI_SERVER_NUM_PKTS": "Number of packets managed by the LCI server",
                "LCI_SERVER_MAX_CQES": "Maximum number of completion queue entries in the LCI server",
                "LCI_PACKET_SIZE": "Size of each packet used by LCI for communication",
                "LCI_USE_DREG": "Flag to enable/disable direct registration for LCI communication",
                "SRUN_EXTRA_OPTION": "Extra option for the srun command to specify the MPI implementation",
                "OCTO_SCRIPT_PATH": "Path to the directory containing Octotiger scripts"
            }
        },
        "task_options": {
            "rs": "Rotating star simulation",
            "dwd": "Direct wall driven simulation",
            "gr": "Gravity simulation",
            "hy": "Hydrodynamics simulation"
        },
        "kernel_types": {
            "KOKKOS": "Kernel type for the host using Kokkos library",
            "LEGACY": "Kernel type for the host using the legacy Octotiger implementation",
            "CUDA": "Kernel type for the GPU using CUDA library",
            "DEVICE_ONLY": "Kernel type for the host that only executes on the device (GPU)"
        },
        "simulation_parameters": {
            "max_level": "Maximum refinement level for the simulation",
            "stop_step": "Number of simulation steps to run",
            "theta": "Courant factor for the simulation",
            "cuda_number_gpus": "Number of GPUs to use for the simulation",
            "cuda_streams_per_gpu": "Number of CUDA streams per GPU",
            "cuda_buffer_capacity": "Buffer capacity for CUDA memory",
            "hpx:threads": "Number of threads per process for HPX"
        }
    }
}