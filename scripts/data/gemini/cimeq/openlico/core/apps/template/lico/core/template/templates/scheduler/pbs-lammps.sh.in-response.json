{
    "candidates": [
        {
            "content": {
                "parts": [
                    {
                        "text": "```json\n{\n  \"application\": \"PBS\",\n  \"details\": {\n    \"resource_allocation\": {\n      \"nodes\": \"{{ nodes|default:1 }}\",\n      \"cores_per_node\": \"{{ cores_per_node|default:1 }}\",\n      \"ram_size\": \"{{ ram_size }}\",\n      \"gpu_per_node\": \"{{ gpu_per_node|default:1 }}\",\n      \"cores\": \"{{ cores|default:1 }}\"\n    },\n    \"job_parameters\": {\n      \"job_name\": \"{{ job_name }}\",\n      \"job_queue\": \"{{ job_queue }}\",\n      \"job_workspace\": \"{{ job_workspace }}\",\n      \"run_time\": \"{{ run_time }}\"\n    }\n  }\n}\n```\n\n**Explanation:**\n\n* **Application:** The script utilizes **PBS** (Portable Batch System) for job scheduling and resource allocation.\n* **Details:**\n    * **Resource Allocation:** The script defines parameters for requesting resources like nodes, cores, memory (RAM), and GPUs. It handles both CPU-only and GPU-enabled job configurations.\n    * **Job Parameters:** The script defines several parameters like job name, queue, workspace, and run time, essential for PBS job submission.\n    * **Environment Variable:** It sets the `ENV_JOB_ID` environment variable using the PBS job ID.\n\nThis script is a typical example of a PBS job submission script, designed to run on a cluster managed by PBS. The script uses templating language (likely Jinja2) to dynamically populate values before submission. \n"
                    }
                ],
                "role": "model"
            },
            "finish_reason": 1,
            "index": 0,
            "safety_ratings": [
                {
                    "category": 9,
                    "probability": 1,
                    "blocked": false
                },
                {
                    "category": 8,
                    "probability": 1,
                    "blocked": false
                },
                {
                    "category": 7,
                    "probability": 1,
                    "blocked": false
                },
                {
                    "category": 10,
                    "probability": 1,
                    "blocked": false
                }
            ],
            "token_count": 0,
            "grounding_attributions": []
        }
    ],
    "usage_metadata": {
        "prompt_token_count": 318,
        "candidates_token_count": 347,
        "total_token_count": 665,
        "cached_content_token_count": 0
    }
}