{
    "application": "Batch Script",
    "details": "This script is designed to test the Community Atmosphere Model (CAM) within the Community Climate System Model (CCSM). It provides a framework for running tests on various high-performance computing (HPC) systems and managing the process of submitting jobs to batch queues.\n\nHere are some key features of the script:\n\n* **System Support:** The script is designed to work on a wide range of HPC systems, including Goldbach, Leehill, Firefly, Yellowstone, JaguarPF/Titan, Lynx, Edison, and Hopper. It handles system-specific commands and configurations to ensure smooth execution.\n\n* **Interactive and Batch Modes:** The script supports both interactive and batch job execution. In interactive mode, the tests are run immediately, allowing for real-time monitoring and debugging. In batch mode, jobs are submitted to the queue for execution, enabling larger-scale testing.\n\n* **Environment Variables:** The script relies on various environment variables to configure the testing process. These variables specify the compiler (Intel, PGI, NAG), the number of MPI tasks and OpenMP threads, the location of input data and test scripts, and other system-specific settings.\n\n* **Test Management:** The script manages a list of tests from an input file (tests_pretag_yellowstone, tests_posttag_titan, etc.). It iterates through these tests, executing them and recording the results in log files and status files.\n\n* **Test Execution:** The script calls the actual test scripts for each test case. It uses specific commands to compile, run, and clean up after each test. It also handles errors and failures, allowing for conditional stopping based on the user's preference.\n\n* **Log and Status Files:** The script generates log files and status files to track the progress of the testing process. The log files contain detailed information about each test, including the execution commands, standard output and error, and the exit code. The status files provide a concise summary of the test results, indicating whether each test passed, failed, skipped, or is pending.\n\n* **Job Submission:** The script provides commands to submit jobs to the batch queues of the respective HPC systems. It uses system-specific tools like bsub (LSF), qsub (PBS), or direct execution (for interactive mode) to manage the job submissions.\n\nThe script relies on a set of environment variables, including:\n\n* **CAM_ROOT:** The root directory of the CAM source code.\n\n* **CAM_FC:** The compiler to use (Intel, PGI, NAG, etc.).\n\n* **CAM_TASKS:** The number of MPI tasks to use.\n\n* **CAM_THREADS:** The number of OpenMP threads to use.\n\n* **CAM_BATCHQ:** The name of the batch queue to use.\n\n* **CAM_ACCOUNT:** The account number to charge the job to.\n\n* **CAM_TESTDIR:** The directory where the test results will be stored.\n\n* **CESMDATAROOT:** The root directory of the CESM input data.\n\n* **CAM_RETAIN_FILES:** A flag indicating whether to retain the test files after execution.\n\n* **CAM_INPUT_TESTS:** The name of the input file containing the list of tests to run.\n\n* **CAM_SOFF:** A flag indicating whether to stop on the first failure.\n\nIn addition to these environment variables, the script also relies on a number of system-specific tools and libraries, including the MPI library, the compiler, the NetCDF library, and the batch queue system."
}